package com.nickcoblentz.kubepentest.commands

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.core.installMordantMarkdown
import com.github.ajalt.clikt.core.requireObject
import com.github.ajalt.clikt.parameters.options.default
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.options.required
import com.github.ajalt.mordant.rendering.TextColors
import com.nickcoblentz.kubepentest.models.KubePentestContext
import com.nickcoblentz.kubepentest.utils.extractHttpsUrls
import com.nickcoblentz.kubepentest.utils.parseNmapXml
import java.nio.file.Files
import java.nio.file.Path
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import javax.xml.parsers.DocumentBuilderFactory
import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.NodeList
import kotlin.io.path.Path
import kotlin.io.path.absolutePathString
import kotlin.io.path.exists

/**
 * Command to process nmap XML scan results and extract URLs for HTTP/HTTPS services.
 * This command parses an nmap XML file, extracts hosts with HTTP or HTTPS services,
 * creates appropriate URLs based on protocol, hostname, and port, and writes them
 * to a file in the gowitness directory.
 */
class NmapToGowitness : CliktCommand(name = "nmap-to-gowitness") {
    override fun help(context: com.github.ajalt.clikt.core.Context) = 
        "${(TextColors.gray)("(offline)")} Process nmap XML scan results and extract URLs for HTTP/HTTPS services"

    private val inputFileOption by option("-i", "--input", help = "Path to nmap XML results file").required()
    private val tagOption by option("-t", "--tag", help = "Tag to add to the output filename").required()

    private val config by requireObject<KubePentestContext>()

    init {
        this.installMordantMarkdown()
    }

    override fun run() {
        // Check if input file exists
        val inputPath = Path(inputFileOption)
        if (!inputPath.exists()) {
            config.prettyLogger.printlnError(
                title = "Error", 
                message = "Input file not found: ${inputPath.absolutePathString()}"
            )
            return
        }

        // Ensure gowitness directory exists
        val gowitnessPath = config.gowitnessDirectoryPath()
        if (!Files.exists(gowitnessPath)) {
            Files.createDirectory(gowitnessPath)
            config.prettyLogger.printlnInfo(
                title = "Directory Created", 
                message = "Created gowitness directory: ${gowitnessPath.absolutePathString()}"
            )
        }

        // Process the nmap XML file
        processNmapResults(inputPath, gowitnessPath)
    }

    /**
     * Process the nmap XML file and extract HTTP/HTTPS services
     */
    private fun processNmapResults(inputPath: Path, gowitnessPath: Path) {
        try {
            config.prettyLogger.printlnInfo(
                title = "Processing", 
                message = "Parsing nmap XML file: ${inputPath.absolutePathString()}"
            )

            val nmapEntries = parseNmapXml(inputPath.toFile().readText())

            // Parse XML
//            val factory = DocumentBuilderFactory.newInstance()
//            val builder = factory.newDocumentBuilder()
//            val document = builder.parse(inputPath.toFile())

            // Extract hosts with HTTP/HTTPS services
            val urls = extractHttpsUrls(nmapEntries)

            if (urls.isEmpty()) {
                config.prettyLogger.printlnWarning(
                    title = "No URLs", 
                    message = "No HTTP/HTTPS services found in the nmap scan results"
                )
                return
            }

            // Create output filename with timestamp and tag
            val timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd-HHmmss"))
            val outputFilename = "gowitness-urls-${tagOption}-${timestamp}.txt"
            val outputPath = gowitnessPath.resolve(outputFilename)

            // Write URLs to file
            Files.write(outputPath, urls)

            config.prettyLogger.printlnInfo(
                title = "Success", 
                message = "Extracted ${urls.size} URLs to ${outputPath.absolutePathString()}"
            )

            // Print gowitness command example
            config.prettyLogger.printlnInfo(
                title = "Gowitness Command", 
                message = "gowitness file -f ${outputPath.absolutePathString()} --chrome-path /usr/bin/chromium"
            )

        } catch (e: Exception) {
            config.prettyLogger.printlnError(
                title = "Error", 
                message = "Failed to process nmap XML file: ${e.message}"
            )
            if (config.verbose) {
                e.printStackTrace()
            }
        }
    }

}
