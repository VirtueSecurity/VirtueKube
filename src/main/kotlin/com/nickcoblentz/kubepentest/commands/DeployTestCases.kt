package com.nickcoblentz.kubepentest.commands

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory
import com.fasterxml.jackson.module.kotlin.readValue
import com.fasterxml.jackson.module.kotlin.registerKotlinModule
import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.core.installMordantMarkdown
import com.github.ajalt.clikt.core.requireObject
import com.github.ajalt.clikt.parameters.options.default
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.options.required
import com.github.ajalt.clikt.parameters.types.long
import com.github.ajalt.mordant.rendering.TextColors
import com.nickcoblentz.data.DataSerializer
import com.nickcoblentz.kubepentest.models.KubePentestContext
import com.nickcoblentz.kubepentest.models.TestResult
import com.nickcoblentz.kubepentest.models.TestStatus
import io.fabric8.kubernetes.api.model.*
import io.fabric8.kubernetes.client.Watcher
import io.fabric8.kubernetes.client.WatcherException
import java.nio.file.Files
import java.nio.file.StandardOpenOption
import java.time.Duration
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicReference
import kotlin.io.path.Path
import kotlin.io.path.absolutePathString

class DeployTestCases : CliktCommand() {
    override fun help(context: com.github.ajalt.clikt.core.Context) = "${(TextColors.green)("(online)")} Deploy workloads to the cluster to test out specific controls"
    private val namespaceOption by option("-n","--namespace", help="Namespace to deploy to").required()
    //private val jobTemplateOption by option("-j","--job-template", help="job template file").required()
    private val podTemplateOption by option("-p","--pod-template", help="job template file").default("testCases/pod-template.yaml")
    private val podWaitTimeOption by option("-t","--pod-time-out", help="Number of seconds to wait for pod deploy to succeed/fail before giving up").long().default(180)
    private val serviceAccountNameTarget by option("-s","--service-account", help="The name of the service account to try to access")
    private val config by requireObject<KubePentestContext>()

    private val podNamePrefix = "kube-pentest-test-case"

    private val signatureString = "Pod security test success!"
    private val testResults = mutableListOf<TestResult>()
    private val testCaseLogFilename = "test-case-history-for-${System.currentTimeMillis()}.md"
    private val testCaseCsvFilename = "test-results-for-${System.currentTimeMillis()}.csv"
    private val testCaseJsonFilename = "test-results-for-${System.currentTimeMillis()}.json"



    //private val dumpOption by option("-d", "--dump", help = "Enable verbose output").flag()

    init {
        this.installMordantMarkdown()
    }

    private fun appendMarkdownLog(log : String) {
        val path = config.testCaseResultsDirectoryPath(testCaseLogFilename)
        if(Files.notExists(path))
            Files.createFile(path)
        Files.writeString(path,log+"\n", StandardOpenOption.APPEND)
    }

    override fun run() {
        val importExportUtils = requireNotNull(config.importExportUtils)


        val podPath = Path(podTemplateOption)
        config.prettyLogger.printlnInfo(message="Loading ${podPath.absolutePathString()}")
        val podTemplateYaml = Files.readString(podPath)




        val controlCaseResult = runTestCase(
            "Control Test: Compliant Job (Expected: PASSED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { job ->
            job.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            job
        }

        if(controlCaseResult.status != TestStatus.PASSED)
        {
            testResults.add(controlCaseResult)
            printSummaryTable()
            config.prettyLogger.printlnError(title="Failure",message="Initial test case failed: ${podPath.absolutePathString()}")
            config.prettyLogger.printlnError(message=podTemplateYaml)
            return
        }

        val testCaseFunctions = mutableListOf<() -> Unit>()


        testCaseFunctions.add {runTestCase(
            "No spec.securityContext or container.securityContextsection: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->

            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.securityContext=null
            pod.spec.containers.forEach { it.securityContext=null }
            //config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(job))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "No spec.securityContext or initContainer.securityContext section: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->

            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.securityContext=null
            pod.spec.containers.forEach { it.securityContext=null }
            pod.spec.initContainers.forEach { it.securityContext=null }
            //config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(job))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "No spec.container.securityContext section: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->

            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach { it.securityContext=null }
            //config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(job))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "No spec.initContainer.securityContext section: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->

            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach { it.securityContext=null }
            //config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(job))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "No spec.securityContext section: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->

            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.securityContext=null
            //config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(job))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext,  container.securityContext with bad stuff section: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach { it.securityContext= SecurityContext().apply {
                runAsUser=0
                runAsGroup=0
                runAsNonRoot=false
                readOnlyRootFilesystem=false
                privileged=true
            }
            }
            //config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(job))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, initContainer.securityContext with bad stuff section: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach { it.securityContext= SecurityContext().apply {
                runAsUser=0
                runAsGroup=0
                runAsNonRoot=false
                readOnlyRootFilesystem=false
                privileged=true
            }
            }
            //config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(job))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, add runAsUser: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach { it.securityContext=SecurityContext().apply {
                runAsUser=0
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, add runAsUser: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach { it.securityContext=SecurityContext().apply {
                runAsUser=0
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, add runAsGroup: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach { it.securityContext=SecurityContext().apply {
                runAsGroup=0
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, add runAsGroup: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach { it.securityContext=SecurityContext().apply {
                runAsGroup=0
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, add runasNonRoot: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach { it.securityContext=SecurityContext().apply {
                runAsNonRoot=false
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, clear initContainer.securityContext, add runasNonRoot: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach { it.securityContext=SecurityContext().apply {
                runAsNonRoot=false
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, add privileged: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach { it.securityContext=SecurityContext().apply {
                privileged=true
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, add privileged: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach { it.securityContext=SecurityContext().apply {
                privileged=true
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, add readOnlyRootFileSystem: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach { it.securityContext=SecurityContext().apply {
                readOnlyRootFilesystem=false
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, add readOnlyRootFileSystem: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach { it.securityContext=SecurityContext().apply {
                readOnlyRootFilesystem=false
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, add allowPrivilegeEscalation: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach { it.securityContext=SecurityContext().apply {
                allowPrivilegeEscalation=true
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, add allowPrivilegeEscalation: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach { it.securityContext=SecurityContext().apply {
                allowPrivilegeEscalation=true
            }
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, seccompProfile=Localhost: profiles/audit.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach {
                it.securityContext=SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("profiles/audit.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, seccompProfile=Localhost: profiles/audit.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach {
                it.securityContext=SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("profiles/audit.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, seccompProfile=Localhost: audit.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach {

                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("audit.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, seccompProfile=Localhost: audit.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach {

                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("audit.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, seccompProfile=Localhost: profiles/custom.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach {

                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("profiles/custom.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, seccompProfile=Localhost: profiles/custom.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach {

                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("profiles/custom.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, seccompProfile=Localhost: profiles/my-profile.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach {

                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("profiles/my-profile.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, seccompProfile=Localhost: profiles/my-profile.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach {

                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("profiles/my-profile.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}


        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, seccompProfile=Localhost: my-profile.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach {
                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("my-profile.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, seccompProfile=Localhost: custom.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach {
                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("custom.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear container.securityContext, seccompProfile=Unconfined: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.containers.forEach {

                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Unconfined").build()
                ).build()

            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add spec.hostPID (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.hostPID=true
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add spec.hostIPC (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.hostIPC=true
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add spec.hostNetwork (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.hostNetwork=true
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add hostPath=/ (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .addNewVolume()
                .withName("hostvolume")
                .withNewHostPath()
                .withPath("/")
                .withType("Directory")
                .endHostPath()
                .endVolume()
                .editFirstContainer()
                .addNewVolumeMount()
                .withName("hostvolume")
                .withMountPath("/mnt/host")
                .endVolumeMount()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add hostPath=/dev (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .addNewVolume()
                .withName("hostvolume")
                .withNewHostPath()
                .withPath("/dev")
                .withType("Directory")
                .endHostPath()
                .endVolume()
                .editFirstContainer()
                .addNewVolumeMount()
                .withName("hostvolume")
                .withMountPath("/mnt/host")
                .endVolumeMount()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add hostPath=/proc (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .addNewVolume()
                .withName("hostvolume")
                .withNewHostPath()
                .withPath("/proc")
                .withType("Directory")
                .endHostPath()
                .endVolume()
                .editFirstContainer()
                .addNewVolumeMount()
                .withName("hostvolume")
                .withMountPath("/mnt/host")
                .endVolumeMount()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add hostPath=/root (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editSecurityContext()
                .withFsGroup(pod.spec.securityContext.runAsGroup)
                .endSecurityContext()
                .addNewVolume()
                .withName("hostvolume")
                .withNewHostPath()
                .withPath("/root")
                .withType("Directory")
                .endHostPath()
                .endVolume()
                .editFirstContainer()
                .addNewVolumeMount()
                .withName("hostvolume")
                .withMountPath("/mnt/host")
                .endVolumeMount()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}


        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, seccompProfile=Localhost: my-profile.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach {
                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("my-profile.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, seccompProfile=Localhost: custom.json (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach {
                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Localhost").withLocalhostProfile("custom.json").build()
                ).build()
            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Clear initContainer.securityContext, seccompProfile=Unconfined: (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            pod.spec.initContainers.forEach {

                it.securityContext = SecurityContextBuilder().withSeccompProfile(
                    SeccompProfileBuilder().withType("Unconfined").build()
                ).build()

            }
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(pod))
            pod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add hostPath=/ (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .addNewVolume()
                .withName("hostvolume")
                .withNewHostPath()
                .withPath("/")
                .withType("Directory")
                .endHostPath()
                .endVolume()
                .editFirstInitContainer()
                .addNewVolumeMount()
                .withName("hostvolume")
                .withMountPath("/mnt/host")
                .endVolumeMount()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add hostPath=/dev (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .addNewVolume()
                .withName("hostvolume")
                .withNewHostPath()
                .withPath("/dev")
                .withType("Directory")
                .endHostPath()
                .endVolume()
                .editFirstInitContainer()
                .addNewVolumeMount()
                .withName("hostvolume")
                .withMountPath("/mnt/host")
                .endVolumeMount()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add hostPath=/proc (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .addNewVolume()
                .withName("hostvolume")
                .withNewHostPath()
                .withPath("/proc")
                .withType("Directory")
                .endHostPath()
                .endVolume()
                .editFirstInitContainer()
                .addNewVolumeMount()
                .withName("hostvolume")
                .withMountPath("/mnt/host")
                .endVolumeMount()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add hostPath=/root (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editSecurityContext()
                .withFsGroup(pod.spec.securityContext.runAsGroup)
                .endSecurityContext()
                .addNewVolume()
                .withName("hostvolume")
                .withNewHostPath()
                .withPath("/root")
                .withType("Directory")
                .endHostPath()
                .endVolume()
                .editFirstInitContainer()
                .addNewVolumeMount()
                .withName("hostvolume")
                .withMountPath("/mnt/host")
                .endVolumeMount()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add add capabilities SYS_ADMIN (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstInitContainer()
                .editSecurityContext().withNewCapabilities().withAdd("SYS_ADMIN").endCapabilities().endSecurityContext()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add add capabilities NET_ADMIN (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstInitContainer()
                .editSecurityContext().withNewCapabilities().withAdd("NET_ADMIN").endCapabilities().endSecurityContext()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add add capabilities DAC_OVERRIDE (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstInitContainer()
                .editSecurityContext().withNewCapabilities().withAdd("DAC_OVERRIDE").endCapabilities().endSecurityContext()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add add capabilities DAC_READ_SEARCH (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstInitContainer()
                .editSecurityContext().withNewCapabilities().withAdd("DAC_READ_SEARCH").endCapabilities().endSecurityContext()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}





        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add add capabilities SYS_PTRACE (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstInitContainer()
                .editSecurityContext().withNewCapabilities().withAdd("SYS_PTRACE").endCapabilities().endSecurityContext()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}
        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add add capabilities SYS_BOOT (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstInitContainer()
                .editSecurityContext().withNewCapabilities().withAdd("SYS_BOOT").endCapabilities().endSecurityContext()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}
        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add add capabilities MKNOD (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstInitContainer()
                .editSecurityContext().withNewCapabilities().withAdd("MKNOD").endCapabilities().endSecurityContext()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}
        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes initContainer.securityContext, Add add capabilities NET_BIND_SERVICE (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstInitContainer()
                .editSecurityContext().withNewCapabilities().withAdd("NET_BIND_SERVICE").endCapabilities().endSecurityContext()
                .endInitContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}


        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add add capabilities SYS_ADMIN (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstContainer()
                .editSecurityContext().withNewCapabilities().withAdd("SYS_ADMIN").endCapabilities().endSecurityContext()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add add capabilities NET_ADMIN (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstContainer()
                .editSecurityContext().withNewCapabilities().withAdd("NET_ADMIN").endCapabilities().endSecurityContext()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add add capabilities DAC_OVERRIDE (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstContainer()
                .editSecurityContext().withNewCapabilities().withAdd("DAC_OVERRIDE").endCapabilities().endSecurityContext()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add add capabilities DAC_READ_SEARCH (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstContainer()
                .editSecurityContext().withNewCapabilities().withAdd("DAC_READ_SEARCH").endCapabilities().endSecurityContext()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}





        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add add capabilities SYS_PTRACE (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstContainer()
                .editSecurityContext().withNewCapabilities().withAdd("SYS_PTRACE").endCapabilities().endSecurityContext()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}
        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add add capabilities SYS_BOOT (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstContainer()
                .editSecurityContext().withNewCapabilities().withAdd("SYS_BOOT").endCapabilities().endSecurityContext()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}
        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add add capabilities MKNOD (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstContainer()
                .editSecurityContext().withNewCapabilities().withAdd("MKNOD").endCapabilities().endSecurityContext()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}
        testCaseFunctions.add {runTestCase(
            "Yes spec.securityContext, Yes container.securityContext, Add add capabilities NET_BIND_SERVICE (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editSpec()
                .editFirstContainer()
                .editSecurityContext().withNewCapabilities().withAdd("NET_BIND_SERVICE").endCapabilities().endSecurityContext()
                .endContainer()
                .endSpec()
                .build()


            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Change Seccomp profile through annotations (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editMetadata().addToAnnotations("seccomp.security.alpha.kubernetes.io/pod","unconfined").endMetadata()
                .build()
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        testCaseFunctions.add {runTestCase(
            "Privileged through pod-security.kubernetes.io/enforced=privileged label (Expected: FAILED)",
            config.k8s.pods().load(podTemplateYaml.byteInputStream()).item()
        ) { pod ->
            println("Running ")
            pod.metadata.name = "$podNamePrefix-${System.currentTimeMillis()}"
            val updatedPod = PodBuilder(pod)
                .editMetadata().addToLabels("pod-security.kubernetes.io/enforced","privileged").endMetadata()
                .build()
            config.prettyLogger.printlnInfo(title="Trying Job:",message=importExportUtils.serializeToYamlString(updatedPod))
            updatedPod
        }}

        val totalTestCases = testCaseFunctions.count()
        var currentTestCaseIndex = 1
        testCaseFunctions.forEach { testCaseFunction ->
            config.prettyLogger.printlnInfo(title="Starting Test Case ${currentTestCaseIndex++}/$totalTestCases")
            testCaseFunction()
        }



        cleanUp()
        printSummaryTable()





    }

    private fun cleanUp() {

        config.k8s.pods().inNamespace(namespaceOption).list().items.forEach { pod ->
            if(pod.metadata.name.startsWith(podNamePrefix))
                config.k8s.pods().inNamespace(namespaceOption).withName(pod.metadata.name).delete()
        }

    }



    private fun runTestCase(testName: String, inputPod: Pod, modifier: (Pod) -> Pod
    ) : TestResult {

        config.prettyLogger.printlnInfo(title = testName,message = "Starting...")
        val modifiedPod = modifier(inputPod)
        val podName = modifiedPod.metadata.name


        // Initialize current test result
        val currentTestResult = TestResult(testName, TestStatus.FAILED)
        val runLog = mutableListOf<String>()
        val logsMap = mutableMapOf<String,MutableList<String>>()

        val beforeYaml = config.importExportUtils?.serializeToYamlString(modifiedPod)
        try {
            // Deploy the Job
            appendMarkdownLog("""
                |## $testName
                |
                |### Submitted $podName YAML
                |
                |```yaml
                |$beforeYaml
                |```
                |
            """.trimMargin())

            val createdJob = config.k8s.pods().inNamespace(namespaceOption).resource(modifiedPod).create()
            config.prettyLogger.printlnInfo(message="Job '$podName' deployed. Waiting for completion...")

            val afterYaml = config.importExportUtils?.serializeToYamlString(createdJob)
            appendMarkdownLog("""                
                |### Resulting $podName YAML
                |
                |```yaml
                |$afterYaml
                |```
                |
            """.trimMargin())

            val mapper = ObjectMapper(YAMLFactory()).registerKotlinModule()
            if(beforeYaml!=null && afterYaml != null) {
                val diffResults = generateDiff(mapper.readValue<YamlData>(beforeYaml), mapper.readValue<YamlData>(afterYaml))
                appendMarkdownLog("""
                    |### Diff
                    |
                    |```yaml
                    | ${diffResults.joinToString("\n")}
                    |```
                    |
                    |""".trimMargin())

            }

            // State variables for virtual thread
            val podSuceeded = AtomicBoolean(false)
            val podCompleted = AtomicBoolean(false)
            val podFailureReason = AtomicReference<String?>(null)



            val podWatcher = object : Watcher<Pod> {
                override fun eventReceived(action: Watcher.Action, resource: Pod) {
                    if (resource.metadata.name == podName) {
                        config.prettyLogger.printlnInfo(title="Job '$podName'",message="status: Succeeded=${resource.status?.phase}, Failed=${resource.status?.phase}")
                        runLog.add("status: Succeeded=${resource.status?.phase}, Failed=${resource.status?.phase}")
                        if (resource.status?.phase == "Running" || resource.status?.phase == "Succeeded") {
                            config.prettyLogger.printlnInfo(message="Job '$podName' succeeded.")
                            runLog.add("Job '$podName' succeeded.")
                            podSuceeded.set(true)
                            podCompleted.set(true)
                        } else if (resource.status?.phase == "Failed") {
                            val lastStatus = mutableListOf<String>()
                            resource?.status?.conditions?.forEach {
                                if(it.message!=null) {
                                    lastStatus.add(it.message)
                                }
                            }
                            val reason = lastStatus.joinToString(";")
                            config.prettyLogger.printlnInfo(title="Job '$podName' failed",message="Reason: $reason")
                            runLog.add("failed! Reason: $reason")
                            podFailureReason.set(reason)
                            podCompleted.set(true)
                        }
                        else {
                            val lastStatus = mutableListOf<String>()
                            resource?.status?.conditions?.forEach {
                                if(it.message!=null) {
                                    lastStatus.add(it.message)
                                }
                            }
                            runLog.add("Status Check: ${lastStatus.joinToString(";")}")
                        }
                    }
                }

                override fun onClose(cause: WatcherException?) {
                    if (cause != null) {
                        config.prettyLogger.printlnInfo(message="Job Watcher closed with exception: ${cause.message}")
                        runLog.add("Job Watcher closed with exception: ${cause.message}")
                        podCompleted.set(true)
                        podSuceeded.set(false)
                        podFailureReason.set("Watcher closed unexpectedly: ${cause.message}")
                    }
                }
            }

            // Start a virtual thread to monitor the job
            val monitorThread = Thread.startVirtualThread {
                config.k8s.pods().inNamespace(namespaceOption).withName(podName).watch(podWatcher).use { watcher ->
                    val startTime = System.currentTimeMillis()
                    val timeoutMillis = Duration.ofSeconds(podWaitTimeOption).toMillis()

                    while (!podCompleted.get() && (System.currentTimeMillis() - startTime) < timeoutMillis) {
                        Thread.sleep(1000) // Sleep for 1 second
                    }
                    if (!podCompleted.get()) {
                        config.prettyLogger.printlnInfo(message="Monitoring for Job '$podName' timed out.")
                        runLog.add("Monitoring for Job '$podName' timed out.")
                        podSuceeded.set(false)
                        podFailureReason.set("Job monitoring timed out.")
                        podCompleted.set(true) // Ensure it's marked as complete
                    }
                }
            }

            monitorThread.join() // Wait for the virtual thread to complete

            if (podSuceeded.get()) {
                config.prettyLogger.printlnInfo(message="Job '$podName' completed successfully. Checking pod logs...")
                runLog.add("Job '$podName' completed successfully. Checking pod logs...")

                val pods = config.k8s.pods().inNamespace(namespaceOption).list().items

                //pods.forEach { config.prettyLogger.printlnError(it.metadata.name) }
                val targetPod = pods.find { it.metadata.name==podName }
                //config.prettyLogger.printlnError("Found: ${targetPod?.metadata?.name}")


                if (targetPod!=null) {
                    val logsList = mutableListOf<String>()

                    val containers = mutableListOf<Container>()
                    containers.addAll(targetPod.spec.containers)
                    containers.addAll(targetPod.spec.initContainers)

                    containers.forEach { container ->
                        val log = config.k8s.pods().inNamespace(namespaceOption)
                            .withName(podName).inContainer(container.name).log
                        if(!log.isNullOrEmpty()) {
                            logsList.add(log)
                            logsMap.putIfAbsent(container.name,mutableListOf<String>())
                            logsMap[container.name]?.add(log)
                        }
                    }

                    targetPod.spec.ephemeralContainers.forEach { container ->
                        val log = config.k8s.pods().inNamespace(namespaceOption)
                            .withName(podName).inContainer(container.name).log
                        if(!log.isNullOrEmpty()) {
                            logsList.add(log)
                            logsMap.putIfAbsent(container.name,mutableListOf<String>())
                            logsMap[container.name]?.add(log)
                        }
                    }

                    //config.prettyLogger.printlnError("Found ${logsList.count()}")
                    val logs = logsList.joinToString("\n")


                    if (logs.contains(signatureString)) {
                        config.prettyLogger.printlnInfo(message="Pod logs contain success signature for '$podName'. Test PASSED.")
                        runLog.add("Pod logs contain success signature for '$podName'. Test PASSED.")
                        currentTestResult.status = TestStatus.PASSED
                    } else {
                        val reason = "Pod logs DO NOT contain success signature for '$podName'."
                        config.prettyLogger.printlnInfo(message="$reason Test FAILED.")
                        runLog.add("$reason Test FAILED.")
                        currentTestResult.status = TestStatus.FAILED
                        currentTestResult.reason = reason
                    }
                    config.prettyLogger.printlnInfo(title="Full logs",message="\n$logs\n=====================")
                    currentTestResult.logs=logs
                } else {
                    val reason = "No pods found for job '$podName'. Cannot verify logs."
                    config.prettyLogger.printlnInfo(message="$reason Test FAILED.")
                    runLog.add("$reason Test FAILED.")
                    currentTestResult.status = TestStatus.FAILED
                    currentTestResult.reason = reason
                }
            } else {
                config.prettyLogger.printlnInfo(message="Job '$podName' failed or timed out. Attempting to extract reasons.")
                runLog.add("Job '$podName' failed or timed out. Attempting to extract reasons.")
                val effectiveReason = podFailureReason.get() ?: "Unknown reason from watcher."
                config.prettyLogger.printlnInfo(message="Failure Reason (from watcher): $effectiveReason")
                runLog.add("Failure Reason (from watcher): $effectiveReason")
                currentTestResult.status = if (podCompleted.get() && !podSuceeded.get()) TestStatus.FAILED else TestStatus.TIMED_OUT
                currentTestResult.reason = effectiveReason

                val targetPod = config.k8s.pods().inNamespace(namespaceOption)
                    .withName(podName)
                    .item()

                if (targetPod!=null) {
                    config.prettyLogger.printlnInfo(message="Pod '${targetPod.metadata.name}' status: ${targetPod.status.phase}")
                    runLog.add("Pod '${targetPod.metadata.name}' status: ${targetPod.status.phase}")
                    val podConditions = targetPod.status.conditions
                    if (!podConditions.isNullOrEmpty()) {
                        runLog.add("Pod conditions:")
                        podConditions.forEach { condition ->
                            config.prettyLogger.printlnInfo(message="  Type: ${condition.type}, Status: ${condition.status}, Reason: ${condition.reason}, Message: ${condition.message}")
                            runLog.add("  Type: ${condition.type}, Status: ${condition.status}, Reason: ${condition.reason}, Message: ${condition.message}")
                            if (currentTestResult.reason == null) {
                                currentTestResult.reason = "${condition.reason}: ${condition.message}"
                            }
                        }
                    }
                    val containerStatuses = targetPod.status.containerStatuses
                    if (!containerStatuses.isNullOrEmpty()) {
                        config.prettyLogger.printlnInfo(message="Container statuses:")
                        runLog.add("Container statuses:")
                        containerStatuses.forEach { status ->
                            if (status.state.terminated != null) {
                                config.prettyLogger.printlnInfo(message="  Container ${status.name} terminated with exit code ${status.state.terminated.exitCode}")
                                config.prettyLogger.printlnInfo(message="    Reason: ${status.state.terminated.reason}, Message: ${status.state.terminated.message}")
                                runLog.add("  Container ${status.name} terminated with exit code ${status.state.terminated.exitCode}")
                                runLog.add("    Reason: ${status.state.terminated.reason}, Message: ${status.state.terminated.message}")
                                if (currentTestResult.reason == null) {
                                    currentTestResult.reason = "${status.state.terminated.reason}: ${status.state.terminated.message}"
                                }
                            } else if (status.state.waiting != null) {
                                config.prettyLogger.printlnInfo(message="  Container ${status.name} waiting: Reason: ${status.state.waiting.reason}, Message: ${status.state.waiting.message}")
                                runLog.add("  Container ${status.name} waiting: Reason: ${status.state.waiting.reason}, Message: ${status.state.waiting.message}")
                                if (currentTestResult.reason == null) {
                                    currentTestResult.reason = "${status.state.waiting.reason}: ${status.state.waiting.message}"
                                }
                            }
                        }
                    }

                    val logs = config.k8s.pods().inNamespace(namespaceOption).withName(targetPod.metadata.name).log
                    if (logs.isNotBlank()) {
                        config.prettyLogger.printlnInfo(message="Full pod logs (may contain error details):\n$logs")
                        runLog.add("Full pod logs (may contain error details):\n$logs")
                        if (currentTestResult.reason == null && logs.contains("denied")) { // Heuristic for admission errors
                            currentTestResult.reason = "Log contains denial message."
                        }
                    }
                } else {
                    config.prettyLogger.printlnInfo(message="No pods found for failed job '$podName'.")
                    runLog.add("No pods found for failed job '$podName'.")
                }
                config.prettyLogger.printlnInfo(message="Test FAILED for '$podName'.")
                runLog.add("Test FAILED for '$podName'.")

            }

        } catch (e: Exception) {
            val reason = "Error deploying or monitoring job '$podName': ${e.message}"
            config.prettyLogger.printlnInfo(message=reason)
            config.prettyLogger.printlnInfo(message="Test FAILED for '$podName'.")

            currentTestResult.status = TestStatus.FAILED
            currentTestResult.reason = reason
        } finally {
            config.prettyLogger.printlnInfo(message="Cleaning up Job '$podName'...")
            config.k8s.pods().inNamespace(namespaceOption)
                .withName(podName)
                .delete()
            config.prettyLogger.printlnInfo(message="Job '$podName' cleaned up.")
            testResults.add(currentTestResult) // Add result to list
            appendMarkdownLog(buildString {
                append("### Run Logs\n```bash\n\n")
                appendLine(runLog.joinToString("\n"))
                append("\n```\n\n")
                append("### Container Logs\n\n")
                logsMap.forEach { (containerName,logs) ->
                    append("#### $containerName\n\n```bash\n")
                    append(logs.joinToString("\n"))
                    append("\n```\n")
                }
            })
        }

        return currentTestResult
    }



    private fun printSummaryTable() {
//        val resultBuilder = buildString {
//            appendLine("# Test Case Summary")
//            appendLine("|Name|Status|Reason|Logs|")
//            appendLine("|---|---|---|---|")
//            testResults.forEach { result ->
//                appendLine("| ${result.name} | ${result.status} | ${result.reason?.lines()?.joinToString(" # ")} | ${result.logs?.lines()?.joinToString(" # ")}")
//            }
//        }
//
//        config.prettyLogger.printlnMarkdown(resultBuilder.toString())
//        appendMarkdownLog(resultBuilder.toString())

        val csvPath = config.testCaseResultsDirectoryPath(testCaseCsvFilename)
        Files.writeString(csvPath,DataSerializer.toCsv(testResults))

        val jsonPath = config.testCaseResultsDirectoryPath(testCaseJsonFilename)
        Files.writeString(jsonPath,DataSerializer.toJson(testResults))

        testResults.forEach { result ->
            result.reason=result.reason?.lines()?.joinToString(" #<br/> ")
            result.logs=result.logs?.lines()?.joinToString(" #<br/> ")
        }
        val markdownResults = DataSerializer.toMarkdownTable(testResults)
        config.prettyLogger.printlnMarkdown("# Test Case Summary")
        appendMarkdownLog("## Test Case Summary")
        config.prettyLogger.printlnMarkdown(markdownResults)
        appendMarkdownLog(markdownResults)
        config.prettyLogger.printlnSuccess(message="Full logs may be found at: ${config.testCaseResultsDirectoryPath(testCaseLogFilename).absolutePathString()}")
        config.prettyLogger.printlnSuccess(message="Results CSV may be found at: ${csvPath.absolutePathString()}")
        config.prettyLogger.printlnSuccess(message="Results JSON may be found at: ${jsonPath.absolutePathString()}")
    }
}



// Type alias for clarity
typealias YamlData = Map<String, Any>

/**
 * Recursively generates a list of differences between two YAML data structures (represented as Maps).
 *
 * @param map1 The first YAML data map.
 * @param map2 The second YAML data map.
 * @param path The current path in the YAML structure (used for reporting).
 * @return A list of strings describing the differences.
 */
fun generateDiff(map1: YamlData, map2: YamlData, path: String = ""): List<String> {
    val differences = mutableListOf<String>()
    val allKeys = (map1.keys + map2.keys).distinct() // Use distinct to avoid processing keys twice

    for (key in allKeys) {
        val currentPath = if (path.isEmpty()) key else "$path.$key"
        val value1 = map1[key]
        val value2 = map2[key]

        when {
            value1 == null && value2 != null -> {
                differences.add("Added: '$currentPath': ${valueToString(value2)}")
            }
            value1 != null && value2 == null -> {
                differences.add("Removed: '$currentPath': ${valueToString(value1)}")
            }
            value1 is Map<*, *> && value2 is Map<*, *> -> {
                @Suppress("UNCHECKED_CAST")
                differences.addAll(generateDiff(value1 as YamlData, value2 as YamlData, currentPath))
            }
            value1 is List<*> && value2 is List<*> -> {
                // More detailed list comparison
                if (value1.size != value2.size || !value1.zip(value2).all { (it.first == it.second) }) { // Basic order matters diff
                    // For a more sophisticated list diff, you'd implement or use a library
                    // that can detect additions/removals/changes within the list.
                    // This example shows a simple difference if lists are not identical in order and content.
                    val diffDetail = compareLists(value1, value2, currentPath)
                    if (diffDetail.isNotEmpty()) {
                        differences.add("Changed List: '$currentPath':\n  Old: ${valueToString(value1)}\n  New: ${valueToString(value2)}\n  Details:\n    - ${diffDetail.joinToString("\n    - ")}")
                    } else if (value1 != value2) { // Fallback if compareLists doesn't find specific item diffs but lists are different
                        differences.add("Changed List Content/Order: '$currentPath':\n  Old: ${valueToString(value1)}\n  New: ${valueToString(value2)}")
                    }
                }
            }
            value1 != value2 -> {
                differences.add("Changed: '$currentPath':\n  Old: ${valueToString(value1)}\n  New: ${valueToString(value2)}")
            }
        }
    }
    return differences
}

/**
 * Helper function to convert values to string for display, handling nulls.
 */
fun valueToString(value: Any?): String {
    return when (value) {
        null -> "null"
        is String -> "\"$value\"" // Add quotes for strings
        is Map<*, *> -> value.entries.joinToString(prefix = "{", postfix = "}") { "\"${it.key}\": ${valueToString(it.value)}" }
        is List<*> -> value.joinToString(prefix = "[", postfix = "]") { valueToString(it) }
        else -> value.toString()
    }
}


fun compareLists(list1: List<*>, list2: List<*>, basePath: String): List<String> {
    val listDiffs = mutableListOf<String>()
    val commonSize = minOf(list1.size, list2.size)

    for (i in 0 until commonSize) {
        if (list1[i] != list2[i]) {
            // Check for nested structures
            if (list1[i] is Map<*, *> && list2[i] is Map<*, *>) {
                @Suppress("UNCHECKED_CAST")
                val nestedDiffs = generateDiff(list1[i] as YamlData, list2[i] as YamlData, "$basePath[$i]")
                if (nestedDiffs.isNotEmpty()) {
                    listDiffs.add("Difference at index $i:\n      " + nestedDiffs.joinToString("\n      "))
                }
            } else {
                listDiffs.add("Difference at index $i: Old: ${valueToString(list1[i])}, New: ${valueToString(list2[i])}")
            }
        }
    }
    if (list1.size > commonSize) {
        for (i in commonSize until list1.size) {
            listDiffs.add("Removed at index $i (original index): ${valueToString(list1[i])}")
        }
    }
    if (list2.size > commonSize) {
        for (i in commonSize until list2.size) {
            listDiffs.add("Added at index $i: ${valueToString(list2[i])}")
        }
    }
    return listDiffs
}