package com.nickcoblentz.kubepentest.commands

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.core.installMordantMarkdown
import com.github.ajalt.clikt.core.requireObject
import com.github.ajalt.mordant.rendering.TextColors
import com.nickcoblentz.kubepentest.models.KubePentestContext
import io.fabric8.kubernetes.api.model.Container
import io.fabric8.kubernetes.api.model.Pod
import java.nio.file.Files
import kotlin.io.path.absolutePathString

/**
 * Command to collect all pod logs.
 */
class PodLogs : CliktCommand() {
    override fun help(context: com.github.ajalt.clikt.core.Context) = "${(TextColors.green)("(online)")} Collect all Pod Logs"
    private val config by requireObject<KubePentestContext>()

    init {
        this.installMordantMarkdown()
    }

    override fun run() {
        val deserializeResources = config.importExportUtils.deserializeFromFile(config.byResourceDataDirectoryPath("Pod.json").toString())
        val pods = deserializeResources.filter { it.kind == "Pod" }.map { config.importExportUtils.unmarshal<Pod>(it) }

        var count = 0
        pods.forEach { pod ->
            val allContainers = mutableListOf<Container>().apply {
                addAll(pod.spec.containers)
                addAll(pod.spec.initContainers)
            }

            allContainers.forEach { container ->
                count++
                val namespace = pod.metadata.namespace
                val podName = pod.metadata.name
                val containerName = container.name
                Files.writeString(
                    config.podLogsDirectoryPath( "${namespace}-${podName}-${containerName}.txt"),
                    config.k8s.pods().inNamespace(namespace).withName(podName).inContainer(containerName).log
                )
            }
        }
        
        config.prettyLogger.printlnSuccess(message = "Pod logs saved to ${config.podLogsDirectoryPath().absolutePathString()}")
        config.prettyLogger.printlnInfo(message = "Found $count logs")
    }
}