package com.nickcoblentz.kubepentest.utils

import io.fabric8.kubernetes.api.model.HasMetadata
import io.fabric8.kubernetes.client.KubernetesClient
import io.fabric8.kubernetes.client.utils.Serialization
import java.nio.file.Files
import kotlin.io.path.Path

/**
 * Utility class for importing and exporting Kubernetes resources.
 */
class ImportExportUtils(private val k8s: KubernetesClient) {
    /**
     * Serialize a list of Kubernetes resources to a JSON file.
     */
    fun serializeToJsonFile(filePath: String, items: List<HasMetadata>) {
        Files.writeString(Path(filePath), Serialization.asJson(items))
    }

    fun serializeToYamlFile(filePath: String, items: List<HasMetadata>) {
        Files.writeString(Path(filePath), Serialization.asYaml(items))
    }

    /**
     * Serialize a list of Kubernetes resources to a JSON string.
     */
    fun serializeToString(items: List<HasMetadata>): String {
        return Serialization.asJson(items)
    }

    /**
     * Serialize a single Kubernetes resource to a JSON string.
     */
    fun serializeToString(item: HasMetadata): String {
        return Serialization.asJson(item)
    }

    /**
     * Serialize a single Kubernetes resource to a YAML string.
     */
    fun serializeToYamlString(item: HasMetadata): String {
        return Serialization.asYaml(item)
    }

    /**
     * Deserialize Kubernetes resources from a JSON file.
     */
    fun deserializeFromFile(filePath: String): MutableList<HasMetadata> {
        return k8s.resourceList(Files.readString(Path(filePath))).items()
    }

    /**
     * Unmarshal a Kubernetes resource to a specific type.
     */
    inline fun <reified T : HasMetadata> unmarshal(resource: HasMetadata): T {
        val test: String = Serialization.asJson(resource)
        return Serialization.unmarshal(test, T::class.java)
    }
}