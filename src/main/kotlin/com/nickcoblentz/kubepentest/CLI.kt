package com.nickcoblentz.kubepentest

import com.github.ajalt.clikt.core.*
import com.github.ajalt.clikt.parameters.options.default
import com.github.ajalt.clikt.parameters.options.option
import com.nickcoblentz.kubepentest.commands.*
import com.nickcoblentz.kubepentest.models.KubePentestContext
import java.nio.file.Paths

/**
 * Main CLI class for the KubePentest application.
 */
class CLI : CliktCommand(name = "java -jar virtuekube-all.jar") {
    // Global options
    override fun help(context: com.github.ajalt.clikt.core.Context) = 
        "VirtueKube is a command line utility to dump all the resources in a Kubernetes Cluster, harvest information that aids in pentesting the cluster, run security test cases and report on the results, and exploit a selection of issues."

    private val configPathOption by option("-c", "--config",
        help = "Path to kube config file")
        .default(Paths.get(System.getProperty("user.home"), ".kube", "config").toString())

    private val outputDirectoryOption by option("-o", "--output-dir", 
        help = "Output directory to save exported resources")
        .default("output")

    // Shared context object
    val config by findOrSetObject { KubePentestContext() }

    init {
        this.installMordantMarkdown()
    }

    override fun run() {
        // Initialize configuration
        //config.verbose = verboseOption
        //config.prettyLogger.verbose = config.verbose
        config.prettyLogger.printlnMarkdown("# Starting CLI")

        // Set paths
        config.kubeConfigPath = configPathOption
        config.dataDirectoryBase = outputDirectoryOption

        config.ensureDirectoriesExist()
    }
}


/**
 * Main entry point for the application
 */
fun main(args: Array<String>) = CLI().subcommands(
    DumpCluster(), 
    IP(), 
    PodLogs(),
    PodImages(), 
    //DeployTestCases(),
    NmapScan(),
    NmapToGowitness(),
    TestDeployment(),
    ProxySocks5(),
    SecurityAnalysis(),
    Exploit(),
    GenerateKustomizeTestCases(),
    ReportKustomizeTestCases()
).main(args)
